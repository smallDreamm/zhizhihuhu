<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.liang.dao.ArticleMapper">
  <resultMap id="BaseResultMap" type="com.liang.bean.Article">
    <id column="fid" jdbcType="INTEGER" property="fid" />
    <result column="titles" jdbcType="VARCHAR" property="titles" />
    <result column="fcontent" jdbcType="VARCHAR" property="fcontent" />
    <result column="photo" jdbcType="VARCHAR" property="photo" />
    <result column="bid" jdbcType="INTEGER" property="bid" />
    <result column="time" jdbcType="TIMESTAMP" property="time" />
    <result column="userid" jdbcType="INTEGER" property="userid" />
    <result column="status" jdbcType="INTEGER" property="status" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    fid, titles, fcontent, photo, bid, time, userid, status
  </sql>
  
  <!-- 查询发帖表信息（分页）（并获取每张帖子所对应评论的条数） -->
  <select id="selectByArticle" parameterType="com.liang.bean.Article" resultMap="BaseResultMap">
    select
      a.fid, a.titles, a.fcontent, a.photo, a.bid, p.bname, a.time, a.userid, u.name as username, a.status,count(c.pid) sum,v.photo userphoto
    from article a left join comment c on a.fid=c.fid left join via v on a.userid=v.userid left join plate p on a.bid=p.bid left join user u on a.userid=u.userid
    where status = 1
    group by a.fid
    order by fid desc
	limit #{offset},#{limit}
  </select>

  <!-- 查询发帖表信息（分页）-管理员 -->
  <select id="selectByArticleAdmin" parameterType="java.util.Map" resultMap="BaseResultMap">
    select
      a.fid, a.titles, a.fcontent, a.photo, p.bname, a.time, a.userid, u.name as username, a.status
    from article a left join plate p on a.bid=p.bid left join user u on a.userid=u.userid
    order by fid desc
    limit #{offset},#{limit}
  </select>
  
  <!-- 按帖子标题模糊查询（搜索框搜索）（并获取每张帖子所对应评论的条数） -->
  <select id="selectByArticleTitle" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
      a.fid, a.titles, a.fcontent, a.photo, p.bname, a.time, a.userid, u.name as username, a.status,count(*) sum
    from article a left join comment c on a.fid=c.fid left join plate p on a.bid=p.bid left join user u on a.userid=u.userid
    where a.titles like "%" #{articleTitle,jdbcType=VARCHAR} "%"
    group by a.fid
    order by fid desc
  </select>
  
  <!-- 按帖子板块查询出帖子（并获取每张帖子所对应评论的条数）-通过审核的 -->
  <select id="selectByArticleBid" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
      a.fid, a.titles, a.fcontent, a.photo, p.bname, a.time, a.userid, u.name as username, a.status,count(c.pid) sum,v.photo userphoto
    from article a left join comment c on a.fid=c.fid left join via v on a.userid=v.userid left join plate p on a.bid=p.bid left join user u on a.userid=u.userid
    where a.bid = #{bid,jdbcType=INTEGER} and a.status = 1
    group by a.fid
    order by fid desc
  </select>
  
  <!-- 按userid查询发帖表信息 -->
  <select id="selectByArticleId" parameterType="com.liang.bean.Article" resultMap="BaseResultMap">
    select
      a.fid, a.titles, a.fcontent, a.photo, a.bid, p.bname, a.time, a.userid, u.name as username, a.status
    from article a left join plate p on a.bid=p.bid left join user u on a.userid=u.userid
    where a.userid = #{userid,jdbcType=INTEGER}
    order by a.fid desc
  </select>
  
  <!-- 按fid查询发帖表信息 -->
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
      a.fid, a.titles, a.fcontent, a.photo, a.bid, p.bname, a.time, a.userid, u.name as username, a.status,count(c.pid) sum,v.photo userphoto
    from article a left join comment c on a.fid=c.fid left join via v on a.userid=v.userid left join plate p on a.bid=p.bid left join user u on a.userid=u.userid
    where a.fid = #{fid,jdbcType=INTEGER}
  </select>

  <!-- 总帖数 -->
  <select id="selectCount" resultType="java.lang.Integer">
    select count(1) from article
  </select>

  <!-- 热门帖子(评论数最多的前10个帖子 ) -->
  <select id="getHotArticle" parameterType="java.util.Map" resultMap="BaseResultMap">
    select
      fid, titles
    from article
    where fid in
          (select temp.fid
           from (select count(*) as total, fid from comment where fid in (select fid from article where status=1) group by fid order by total desc limit 10) as temp)
  </select>

  <!-- 按fid删除帖子 -->
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from article
    where fid = #{fid,jdbcType=INTEGER}
  </delete>
  
  <!-- 删除用户对应的帖子信息(按userid) -->
  <delete id="deleteByUserid" parameterType="java.lang.Integer">
    delete from article
    where userid = #{userid,jdbcType=INTEGER}
  </delete>
  
  <!-- 向数据库插入发帖信息 -->
  <insert id="insert" parameterType="com.liang.bean.Article">
    insert into article (fid, titles, fcontent,
      photo, bid, time,
      userid, status
      )
    values (#{fid,jdbcType=INTEGER}, #{titles,jdbcType=VARCHAR}, #{fcontent,jdbcType=VARCHAR}, 
      #{photo,jdbcType=VARCHAR}, #{bid,jdbcType=INTEGER}, #{time,jdbcType=TIMESTAMP},
      #{userid,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}
      )
  </insert>
  
  <!-- 修改帖子表 -->
  <update id="updateByPrimaryKey" parameterType="com.liang.bean.Article">
    update article
    set titles = #{titles,jdbcType=VARCHAR},
      fcontent = #{fcontent,jdbcType=VARCHAR},
      photo = #{photo,jdbcType=VARCHAR},
      bid = #{bid,jdbcType=INTEGER}
    where fid = #{fid,jdbcType=INTEGER}
  </update>
  
  <!-- 修改article表的status属性（修改审核状态） -->
  <update id="updateArticleStatus" parameterType="com.liang.bean.Article">
    update article
    set status = #{status,jdbcType=INTEGER}
    where fid = #{fid,jdbcType=INTEGER}
  </update>
  
</mapper>